version: '3.8'

services:
  # SQL Server Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: access-management-db
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrong@Passw0rd
      - MSSQL_PID=Express
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks:
      - access-management-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd' -C -Q 'SELECT 1'"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Database Initialization
  db-init:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: db-init
    depends_on:
      sqlserver:
        condition: service_healthy
    volumes:
      - ./database/init-db.sql:/tmp/init-db.sql
    networks:
      - access-management-network
    command: >
      bash -c "
        echo 'Waiting for SQL Server to be ready...'
        sleep 10
        echo 'Running database initialization...'
        /opt/mssql-tools18/bin/sqlcmd -S sqlserver -U sa -P 'YourStrong@Passw0rd' -C -i /tmp/init-db.sql
        echo 'Database initialization completed!'
      "

  # AccessRequest API
  accessrequest-api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: AccessRequest.Api
    container_name: accessrequest-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:5001
      - ConnectionStrings__DefaultConnection=Server=sqlserver,1433;Database=AccessManagementSystem;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=true;MultipleActiveResultSets=true;
    ports:
      - "5001:5001"
    depends_on:
      - db-init
    networks:
      - access-management-network

  # UserManagement API
  usermanagement-api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: UserManagement.Api
    container_name: usermanagement-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:5003
      - ConnectionStrings__DefaultConnection=Server=sqlserver,1433;Database=AccessManagementSystem;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=true;MultipleActiveResultSets=true;
    ports:
      - "5003:5003"
    depends_on:
      - db-init
    networks:
      - access-management-network

  # Audit API
  audit-api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: Audit.Api
    container_name: audit-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:5002
      - ConnectionStrings__DefaultConnection=Server=sqlserver,1433;Database=AccessManagementSystem;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=true;MultipleActiveResultSets=true;
    ports:
      - "5002:5002"
    depends_on:
      - db-init
    networks:
      - access-management-network

  # Angular Frontend
  angular-frontend:
    build:
      context: ./src/frontend/access-management-ui
      dockerfile: Dockerfile
    container_name: angular-frontend
    ports:
      - "4200:4200"
    depends_on:
      - accessrequest-api
      - usermanagement-api
      - audit-api
    networks:
      - access-management-network

volumes:
  sqlserver_data:

networks:
  access-management-network:
    driver: bridge
